{"paragraphs":[{"text":"%pyspark\nimport nltk\nnltk.download('stopwords')","user":"anonymous","dateUpdated":"2018-10-23T15:32:58+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"[nltk_data] Downloading package stopwords to /root/nltk_data...\n[nltk_data]   Unzipping corpora/stopwords.zip.\nTrue\n"}]},"apps":[],"jobName":"paragraph_1539271450043_1845493251","id":"20181011-152410_102512638","dateCreated":"2018-10-11T15:24:10+0000","dateStarted":"2018-10-23T15:32:58+0000","dateFinished":"2018-10-23T15:32:59+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:172"},{"text":"%pyspark\ntokensDF = spark.read.json(\"/share_dir/attack_westminster_small_tokenized.json\")\ntokensDF.show()","user":"anonymous","dateUpdated":"2018-10-23T15:32:59+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+--------------------+--------------------+--------------------+--------------------+--------------------+---------------------+\n|         originalUrl|                text|               title|              tokens|        tokens_lower|tokens_with_stopwords|\n+--------------------+--------------------+--------------------+--------------------+--------------------+---------------------+\n|https://www.thegu...|London attack: po...|Westminster attac...|[London, attack, ...|[london, attack, ...| [London, attack, ...|\n|http://news.sky.c...|London hospitals ...|Anti-terror barri...|[London, hospital...|[london, hospital...| [London, hospital...|\n|https://www.thegu...|The mind goes num...|The numbing after...|[mind, goes, numb...|[mind, goes, numb...| [The, mind, goes,...|\n|http://www.financ...|Five people died ...|London terror att...|[Five, people, di...|[five, people, di...| [Five, people, di...|\n|https://www.newst...|People in Westmin...|People in Westmin...|[People, Westmins...|[people, westmins...| [People, in, West...|\n|https://www.buzzf...|The Metropolitan ...|Here's The Misinf...|[Metropolitan, po...|[metropolitan, po...| [The, Metropolita...|\n|http://news.googl...|Media captionFoot...|London attack: Fo...|[Media, captionFo...|[media, captionfo...| [Media, captionFo...|\n|https://www.stand...|Popular Videos Kh...|Taliban bomb-make...|[Popular, Videos,...|[popular, videos,...| [Popular, Videos,...|\n|http://www.unilad...|Not Found This is...|Page not found - ...|[Found, somewhat,...|[found, somewhat,...| [Not, Found, This...|\n|https://www.rt.co...|Ellwood, who has ...|British politicia...|[Ellwood, MP, Bou...|[ellwood, mp, bou...| [Ellwood, who, ha...|\n|http://www.opinie...|[phpBB Debug] PHP...|Muslim leaders ho...|[phpBB, Debug, PH...|[phpbb, debug, ph...| [phpBB, Debug, PH...|\n|https://uk.news.y...|Phillip Schofield...|Phillip Schofield...|[Phillip, Schofie...|[phillip, schofie...| [Phillip, Schofie...|\n|https://www.thegu...|PM visits injured...|Westminster attac...|[PM, visits, inju...|[pm, visits, inju...| [PM, visits, inju...|\n|https://www.expre...|Express.co.uk rel...|London terror att...|[Express.co.uk, r...|[express.co.uk, r...| [Express.co.uk, r...|\n|http://www.watfor...|Watford Muslims j...|'Love for all, ha...|[Watford, Muslims...|[watford, muslims...| [Watford, Muslims...|\n|https://www.ft.co...|Subscribe to the ...|Subscribe to read...|[Subscribe, FT, r...|[subscribe, ft, r...| [Subscribe, to, t...|\n|https://stv.tv/ne...|Postcode iThere a...|Police officer st...|[Postcode, iThere...|[postcode, ithere...| [Postcode, iThere...|\n|http://terrorism....|Officer who witne...|Officer who witne...|[Officer, witness...|[officer, witness...| [Officer, who, wi...|\n|http://www.reuter...|Video shows injur...|Video shows injur...|[Video, shows, in...|[video, shows, in...| [Video, shows, in...|\n|http://www.expres...|POLICE officers a...|Police told NOT t...|[POLICE, officers...|[police, officers...| [POLICE, officers...|\n+--------------------+--------------------+--------------------+--------------------+--------------------+---------------------+\nonly showing top 20 rows\n\n"}]},"apps":[],"jobName":"paragraph_1539271044051_-1276978677","id":"20181011-151724_1637744028","dateCreated":"2018-10-11T15:17:24+0000","dateStarted":"2018-10-23T15:32:59+0000","dateFinished":"2018-10-23T15:33:03+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:173","runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://172.17.0.2:4040/jobs/job?id=0","http://172.17.0.2:4040/jobs/job?id=1"],"interpreterSettingId":"spark"}}},{"text":"%pyspark\n","user":"anonymous","dateUpdated":"2018-10-23T15:26:09+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"[((u'on', u'bridge'), 102), ((u'the', u'attack'), 45), ((u'the', u'bridge'), 28), ((u'the', u'terror'), 27), ((u'across', u'bridge'), 23), ((u'over', u'bridge'), 16), ((u'along', u'bridge'), 13), ((u'of', u'in'), 12), ((u'of', u'and'), 11), ((u'of', u'masood'), 10)]\n"}]},"apps":[],"jobName":"paragraph_1539271069572_1598741089","id":"20181011-151749_266693623","dateCreated":"2018-10-11T15:17:49+0000","dateStarted":"2018-10-16T15:25:11+0000","dateFinished":"2018-10-16T15:25:12+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:174"},{"text":"%pyspark\ndef getTokens(text):\n    from nltk.tokenize import word_tokenize\n    word_tokens = word_tokenize(text.encode('ascii','ignore'))\n    return [w.lower() for w in word_tokens]\ntokensRDD = tokensDF.rdd.map(lambda x: getTokens(x.text))","user":"anonymous","dateUpdated":"2018-10-23T15:33:03+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1539553780656_-1880738769","id":"20181014-214940_1377354387","dateCreated":"2018-10-14T21:49:40+0000","dateStarted":"2018-10-23T15:33:03+0000","dateFinished":"2018-10-23T15:33:04+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:175"},{"text":"%pyspark\nfrom nltk.text import ContextIndex\nfrom collections import Counter\n\ncommon_contexts = tokensRDD.flatMap(lambda x: ([y[0] for y in ContextIndex(x).common_contexts(['westminster']).most_common()])).collect()\nCounter(common_contexts).most_common(10)","user":"anonymous","dateUpdated":"2018-10-23T15:33:04+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"[(('on', 'bridge'), 102), (('the', 'attack'), 45), (('in', '.'), 32), (('of', ','), 31), (('the', 'bridge'), 28), (('the', 'terror'), 27), (('across', 'bridge'), 23), (('in', ','), 22), (('of', '.'), 19), (('over', 'bridge'), 16)]\n"}]},"apps":[],"jobName":"paragraph_1539703844339_2080322437","id":"20181016-153044_843002228","dateCreated":"2018-10-16T15:30:44+0000","dateStarted":"2018-10-23T15:33:04+0000","dateFinished":"2018-10-23T15:33:08+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:176","runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://172.17.0.2:4040/jobs/job?id=2"],"interpreterSettingId":"spark"}}},{"text":"%pyspark\nfrom nltk.text import ConcordanceIndex\nfrom collections import namedtuple\n\nclass Concordance(namedtuple('Concordance', ['query', 'left', 'right', 'line', 'lc', 'rc'])):\n    def __eq__(self, other):\n        return self.line == other.line\n    def __hash__(self):\n        return hash(self.line)\n\ndef getConcordances(concordanceIndex, words, left=1, right=1):\n    if type(words) == str:\n        words = words.split()\n    concordance_list = []\n    offsets = {}\n    for word in words:\n        offsets[word] = set(concordanceIndex.offsets(word) or [])\n    \n    for offset in offsets[words[0]]:\n        match = True\n        for index, word in enumerate(words[1:]):\n            if index + offset + 1 not in offsets[word]:\n                match = False\n                break\n        if match:\n            leftTokens = tuple(concordanceIndex._tokens[offset-left:offset])\n            rightTokens = tuple(concordanceIndex._tokens[offset+len(words):offset+len(words)+right])\n            if len(leftTokens) == left and len(rightTokens) == right:\n                # line = ' '.join(concordanceIndex._tokens[offset-left:offset+len(words)+right])\n                line = (' '.join(leftTokens), ' '.join(rightTokens))\n                # concordance_list.append(Concordance(tuple(words), leftTokens, rightTokens, line, left, right))\n                concordance_list.append(line)\n    return concordance_list\n\nconcordanances = tokensRDD.map(lambda x: ConcordanceIndex(x))","user":"anonymous","dateUpdated":"2018-10-23T15:33:08+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1539552591643_-370965717","id":"20181014-212951_554016855","dateCreated":"2018-10-14T21:29:51+0000","dateStarted":"2018-10-23T15:33:08+0000","dateFinished":"2018-10-23T15:33:08+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:177"},{"text":"%pyspark\ndef showCommonConcordances(values, l=3, r=3, n=20):\n    counter = Counter()\n    for value in values:\n        for left in range(l):\n            for right in range(r):\n                if left != 0 or right != 0:\n                    counter.update(Counter(concordanances.flatMap(lambda x: getConcordances(x, value.lower(), left=left, right=right)).collect()))\n    countDF = spark.createDataFrame([(x[0][0], x[0][1], x[1]) for x in counter.most_common(n)], ['left', 'right', 'count'])\n    countDF.show(n=n, truncate=False)","user":"anonymous","dateUpdated":"2018-10-23T15:33:08+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1539553551808_608494196","id":"20181014-214551_1440217689","dateCreated":"2018-10-14T21:45:51+0000","dateStarted":"2018-10-23T15:33:08+0000","dateFinished":"2018-10-23T15:33:08+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:178"},{"text":"%pyspark\n\nslots = {'Location': ['Westminster', 'Westminster Bridge', 'London', 'United Kingdom'],\n         'Attacker': ['Khalid Masood', 'Masood', 'Khalid'],\n         'Year': ['2017'],\n         'Month': ['March', 'Mar', '3', '03'],\n         'Deaths': ['6', 'six', 'died', 'deaths', 'dead'],\n         'Injuries': ['49', 'injured', 'injuries']}\n\nvalues = ['Westminster', 'Westminster Bridge', 'London', 'United Kingdom']\nshowCommonConcordances(values, n=50)\n","user":"anonymous","dateUpdated":"2018-10-23T15:27:44+0000","config":{"colWidth":12,"fontSize":9,"enabled":false,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+--------------+-------------+-----+\n|left          |right        |count|\n+--------------+-------------+-----+\n|in            |             |553  |\n|on            |             |522  |\n|              |bridge       |497  |\n|              |,            |445  |\n|the           |             |372  |\n|              |.            |283  |\n|of            |             |279  |\n|on            |bridge       |238  |\n|              |attack       |194  |\n|              |and          |155  |\n|palace of     |             |153  |\n|in            |,            |135  |\n|attack in     |             |111  |\n|in            |.            |106  |\n|the           |attack       |105  |\n|at            |             |103  |\n|              |terror       |95   |\n|pedestrians on|             |92   |\n|of            |,            |84   |\n|,             |             |82   |\n|              |bridge ,     |81   |\n|              |terror attack|79   |\n|attack on     |             |79   |\n|              |bridge and   |75   |\n|.             |             |74   |\n|              |in           |73   |\n|across        |             |71   |\n|of the        |             |64   |\n|east          |             |62   |\n|in the        |             |61   |\n|              |on           |60   |\n|incident on   |             |60   |\n|palace of     |,            |58   |\n|the           |terror       |54   |\n|              |attacker     |52   |\n|the           |terror attack|51   |\n|              |bridge .     |50   |\n|              |is           |50   |\n|              |. the        |50   |\n|              |bridge in    |47   |\n|pedestrians on|bridge       |47   |\n|on            |and          |47   |\n|on            |bridge and   |46   |\n|parliament in |             |45   |\n|over          |             |45   |\n|near          |             |44   |\n|              |, and        |44   |\n|on            |.            |43   |\n|on            |,            |43   |\n|pavement on   |             |42   |\n+--------------+-------------+-----+\n\n"}]},"apps":[],"jobName":"paragraph_1539273195462_536927379","id":"20181011-155315_1742326706","dateCreated":"2018-10-11T15:53:15+0000","dateStarted":"2018-10-23T15:26:12+0000","dateFinished":"2018-10-23T15:27:01+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:179"},{"text":"%pyspark\nvalues = ['Khalid Masood', 'Masood', 'Khalid']\nshowCommonConcordances(values, n=50)","user":"anonymous","dateUpdated":"2018-10-23T15:27:52+0000","config":{"colWidth":12,"fontSize":9,"enabled":false,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+--------------------+-----------+-----+\n|left                |right      |count|\n+--------------------+-----------+-----+\n|khalid              |           |213  |\n|                    |masood     |213  |\n|                    |,          |191  |\n|.                   |           |113  |\n|                    |was        |105  |\n|,                   |           |99   |\n|                    |'s         |81   |\n|                    |masood ,   |66   |\n|khalid              |,          |66   |\n|of                  |           |60   |\n|that                |           |59   |\n|                    |had        |52   |\n|attacker            |           |48   |\n|                    |.          |40   |\n|                    |, who      |39   |\n|when                |           |36   |\n|                    |acted      |33   |\n|                    |, 52       |32   |\n|                    |acted alone|28   |\n|westminster attacker|           |26   |\n|                    |drove      |24   |\n|.                   |,          |24   |\n|attacker khalid     |           |24   |\n|attacker            |masood     |24   |\n|                    |killed     |23   |\n|said                |           |23   |\n|as                  |           |23   |\n|by                  |           |22   |\n|                    |, a        |22   |\n|,                   |masood     |22   |\n|, khalid            |           |22   |\n|attacker ,          |           |20   |\n|                    |in         |20   |\n|                    |'s attack  |19   |\n|.                   |was        |19   |\n|.                   |had        |18   |\n|terrorist           |           |17   |\n|that                |was        |16   |\n|,                   |,          |16   |\n|:                   |           |16   |\n|52-year-old         |           |16   |\n|                    |had a      |16   |\n|                    |masood .   |15   |\n|                    |had been   |15   |\n|khalid              |.          |15   |\n|                    |, the      |15   |\n|of                  |,          |15   |\n|                    |and        |15   |\n|                    |travelled  |14   |\n|. khalid            |           |13   |\n+--------------------+-----------+-----+\n\n"}]},"apps":[],"jobName":"paragraph_1539551916173_1119636849","id":"20181014-211836_831919293","dateCreated":"2018-10-14T21:18:36+0000","dateStarted":"2018-10-23T15:27:01+0000","dateFinished":"2018-10-23T15:27:37+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:180"},{"text":"%pyspark\nimport re\nlocationExpr = re.compile('(?:^|\\s)(?:in|In|at|At|on|On)\\s+((?:[A-Z][A-Za-z]+,?\\s+)*(?:[A-Z][A-Za-z]+))')\nmatches = tokensDF.rdd.map(lambda x: x.text.encode('ascii', 'ignore')).flatMap(lambda x: locationExpr.findall(x)).collect()\ncounter = Counter(matches)\nspark.createDataFrame(counter.most_common(10), ['Location', 'Count']).show()\n","user":"anonymous","dateUpdated":"2018-10-24T19:17:47+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+------------------+-----+\n|          Location|Count|\n+------------------+-----+\n|            London|  258|\n|       Westminster|  256|\n|Westminster Bridge|  201|\n|          Thursday|  153|\n|               Mar|  152|\n|        Birmingham|  139|\n|         Wednesday|  129|\n|           Britain|   63|\n|             March|   56|\n|            Friday|   56|\n+------------------+-----+\n\n"}]},"apps":[],"jobName":"paragraph_1539702591319_610083468","id":"20181016-150951_1882562277","dateCreated":"2018-10-16T15:09:51+0000","dateStarted":"2018-10-24T19:17:47+0000","dateFinished":"2018-10-24T19:17:48+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:181","runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://172.17.0.2:4040/jobs/job?id=45","http://172.17.0.2:4040/jobs/job?id=46","http://172.17.0.2:4040/jobs/job?id=47"],"interpreterSettingId":"spark"}}},{"text":"%pyspark\nattackerExpr = re.compile('(?:^|\\s)(?:attacker|Attacker|terrorist|Terrorist|shooter|Shooter)\\s+((?:[A-Z][A-Za-z]+,?\\s+)*(?:[A-Z][A-Za-z]+))')\nmatches = tokensDF.rdd.map(lambda x: x.text.encode('ascii', 'ignore')).flatMap(lambda x: attackerExpr.findall(x)).collect()\ncounter = Counter(matches)\nspark.createDataFrame(counter.most_common(10), ['Attacker', 'Count']).show()","user":"anonymous","dateUpdated":"2018-10-24T19:17:48+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-------------+-----+\n|     Attacker|Count|\n+-------------+-----+\n|Khalid Masood|   32|\n|         Four|    4|\n|    According|    2|\n|       Attack|    2|\n|       Police|    1|\n|       Mr Ali|    1|\n|     Entities|    1|\n|        March|    1|\n|  Adrian Ajao|    1|\n|           At|    1|\n+-------------+-----+\n\n"}]},"apps":[],"jobName":"paragraph_1539875334718_-570055766","id":"20181018-150854_1886913610","dateCreated":"2018-10-18T15:08:54+0000","dateStarted":"2018-10-24T19:17:48+0000","dateFinished":"2018-10-24T19:17:48+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:182","runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://172.17.0.2:4040/jobs/job?id=48","http://172.17.0.2:4040/jobs/job?id=49","http://172.17.0.2:4040/jobs/job?id=50"],"interpreterSettingId":"spark"}}},{"text":"%pyspark\nmonthExpr = re.compile('(January|February|March|April|May|June|July|August|September|October|November|December|Jan|Feb|Mar|Apr|Jun|Jul|Aug|Sep|Oct|Nov|Dec)', flags=re.IGNORECASE)\nmatches = tokensDF.rdd.map(lambda x: x.text.encode('ascii', 'ignore')).flatMap(lambda x: monthExpr.findall(x)).map(lambda x: x.title()).collect()\ncounter = Counter(matches)\nspark.createDataFrame(counter.most_common(10), ['Month', 'Count']).show()","user":"anonymous","dateUpdated":"2018-10-24T19:17:48+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+---------+-----+\n|    Month|Count|\n+---------+-----+\n|      Mar|  627|\n|      May|  576|\n|    March|  232|\n|      Dec|  207|\n|      Aug|  155|\n|September|   68|\n|      Sep|   66|\n|    April|   64|\n|     June|   63|\n| November|   56|\n+---------+-----+\n\n"}]},"apps":[],"jobName":"paragraph_1539878355648_1822799011","id":"20181018-155915_1487029291","dateCreated":"2018-10-18T15:59:15+0000","dateStarted":"2018-10-24T19:17:49+0000","dateFinished":"2018-10-24T19:17:49+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:183","runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://172.17.0.2:4040/jobs/job?id=51","http://172.17.0.2:4040/jobs/job?id=52","http://172.17.0.2:4040/jobs/job?id=53"],"interpreterSettingId":"spark"}}},{"text":"%pyspark\ndayExpr = re.compile('(?:^|\\s+)0{0,1}([1-9]{0,1}[0-9]{1})(?:$|,|\\s+|nd|th|st)', flags=re.IGNORECASE)\nmatches = tokensDF.rdd.map(lambda x: x.text.encode('ascii', 'ignore')).flatMap(lambda x: dayExpr.findall(x)).collect()\ncounter = Counter(matches)\nspark.createDataFrame(counter.most_common(10), ['Day', 'Count']).show()\n","user":"anonymous","dateUpdated":"2018-10-24T19:17:49+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+---+-----+\n|Day|Count|\n+---+-----+\n| 22|  159|\n| 40|   79|\n| 25|   68|\n| 10|   66|\n| 24|   61|\n| 23|   59|\n|  4|   56|\n| 50|   55|\n| 30|   54|\n| 12|   47|\n+---+-----+\n\n"}]},"apps":[],"jobName":"paragraph_1539879241885_-1340508543","id":"20181018-161401_1676278644","dateCreated":"2018-10-18T16:14:01+0000","dateStarted":"2018-10-24T19:17:49+0000","dateFinished":"2018-10-24T19:17:50+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:184","runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://172.17.0.2:4040/jobs/job?id=54","http://172.17.0.2:4040/jobs/job?id=55","http://172.17.0.2:4040/jobs/job?id=56"],"interpreterSettingId":"spark"}}},{"text":"%pyspark\nyearExpr = re.compile('([0-9]{4})')\nmatches = tokensDF.rdd.map(lambda x: x.text.encode('ascii', 'ignore')).flatMap(lambda x: yearExpr.findall(x)).collect()\ncounter = Counter(matches)\nspark.createDataFrame(counter.most_common(10), ['Year', 'Count']).show()\n","user":"anonymous","dateUpdated":"2018-10-24T19:17:50+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+----+-----+\n|Year|Count|\n+----+-----+\n|2017|  293|\n|2015|   87|\n|2016|   75|\n|2014|   49|\n|2005|   36|\n|2009|   32|\n|2018|   28|\n|2003|   28|\n|2013|   25|\n|2010|   22|\n+----+-----+\n\n"}]},"apps":[],"jobName":"paragraph_1539878608906_2128081194","id":"20181018-160328_1390791448","dateCreated":"2018-10-18T16:03:28+0000","dateStarted":"2018-10-24T19:17:50+0000","dateFinished":"2018-10-24T19:17:51+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:185","runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://172.17.0.2:4040/jobs/job?id=57","http://172.17.0.2:4040/jobs/job?id=58","http://172.17.0.2:4040/jobs/job?id=59"],"interpreterSettingId":"spark"}}},{"text":"%pyspark\nfrom word2number import w2n\nfrom num2words import num2words as n2w\ndef isNumber(text):\n    try:\n        w2n.word_to_num(text)\n    except:\n        return False\n    return True\n\ndef numAsWord(text):\n    return n2w(w2n.word_to_num(text))\n    \ndef findAllOverlap(regex, text):\n    p = 0\n    results = []\n    while True:\n        res = regex.match(text, p)\n        if res:\n            results.append(res.group(1))\n            p = res.start(1) + 1\n        else:\n            return results\n    ","user":"anonymous","dateUpdated":"2018-10-24T19:52:14+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1539879230385_674319778","id":"20181018-161350_570395229","dateCreated":"2018-10-18T16:13:50+0000","dateStarted":"2018-10-24T19:52:14+0000","dateFinished":"2018-10-24T19:52:14+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:186"},{"text":"%pyspark\nkilledExpr = re.compile('(?:^|\\s+)((?:\\w+\\s+){0,4}\\w+)\\s+(?:people have died|people died|people dead|died|victims|dead)')\nmatches = tokensDF.rdd.map(lambda x: x.text.encode('ascii', 'ignore')).flatMap(lambda x: killedExpr.findall(x)).map(lambda x: x.lower()).filter(isNumber).map(numAsWord).collect()\ncounter = Counter(matches)\nspark.createDataFrame(counter.most_common(10), ['Deaths', 'Count']).show(truncate=False)","user":"anonymous","dateUpdated":"2018-10-24T20:18:38+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1540307152250_-1005419528","id":"20181023-150552_989409808","dateCreated":"2018-10-23T15:05:52+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:187","dateFinished":"2018-10-24T20:18:38+0000","dateStarted":"2018-10-24T20:18:38+0000","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+------+-----+\n|Deaths|Count|\n+------+-----+\n|four  |37   |\n|one   |34   |\n|five  |29   |\n|three |18   |\n|two   |6    |\n|six   |2    |\n|eight |2    |\n+------+-----+\n\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://172.17.0.2:4040/jobs/job?id=238","http://172.17.0.2:4040/jobs/job?id=239","http://172.17.0.2:4040/jobs/job?id=240"],"interpreterSettingId":"spark"}}},{"text":"%pyspark\ninjuredExpr = re.compile('(?:^|\\s+)(\\w+)\\s+(?:people have been injured|\\w+\\s+injured|injured|hurt)')\nmatches = tokensDF.rdd.map(lambda x: x.text.encode('ascii', 'ignore')).flatMap(lambda x: injuredExpr.findall(x)).map(lambda x: x.lower()).filter(isNumber).map(numAsWord).collect()\ncounter = Counter(matches)\nspark.createDataFrame(counter.most_common(10), ['Injuries', 'Count']).show(truncate=False)","user":"anonymous","dateUpdated":"2018-10-24T20:19:51+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1540311247583_-277529157","id":"20181023-161407_969878552","dateCreated":"2018-10-23T16:14:07+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:2681","dateFinished":"2018-10-24T20:19:52+0000","dateStarted":"2018-10-24T20:19:51+0000","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+--------+-----+\n|Injuries|Count|\n+--------+-----+\n|forty   |7    |\n|three   |3    |\n|fifty   |3    |\n|eight   |1    |\n+--------+-----+\n\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://172.17.0.2:4040/jobs/job?id=257","http://172.17.0.2:4040/jobs/job?id=258","http://172.17.0.2:4040/jobs/job?id=259"],"interpreterSettingId":"spark"}}},{"text":"%pyspark\n","user":"anonymous","dateUpdated":"2018-10-24T19:17:52+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1540408671999_1550324931","id":"20181024-191751_176244625","dateCreated":"2018-10-24T19:17:51+0000","status":"READY","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:3119"}],"name":"Unit 8","id":"2DVEWX83P","noteParams":{},"noteForms":{},"angularObjects":{"spark:shared_process":[]},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}